<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.0"
	xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
	<persistence-unit name="testjpa" transaction-type="RESOURCE_LOCAL">
		<jta-data-source>osgi:service/javax.sql.XADataSource/(osgi.jndi.service.name=jdbc/testdb)</jta-data-source>
		<non-jta-data-source>osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/testdbnojta)</non-jta-data-source>
		<!-- <jta-data-source>osgi:service/jdbc/testdb</jta-data-source> <non-jta-data-source>osgi:service/jdbc/testdbnojta</non-jta-data-source> -->
		<class>com.chinarewards.test.domain.Example</class>
		<exclude-unlisted-classes>true</exclude-unlisted-classes>
		<properties>
			<!-- These properties are creating the database on the fly. We are using 
				them to avoid users having to create a database to run the sample. This is 
				not something that should be used in production. See also the create=true 
				line in the blog-datasource blueprint meta data -->
			<property name="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)" />
			<property name="openjpa.jdbc.DBDictionary" value="derby" />
			<property name="eclipselink.ddl-generation" value="drop-and-create-tables" />
			<property name="eclipselink.ddl-generation.output-mode"
				value="database" />
		</properties>
	</persistence-unit>
</persistence>
